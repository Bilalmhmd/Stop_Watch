/***************************************************************
 *Description : Stop Watch System Project
 *  Created on: Oct 30, 2023
 *      Author: Bilal Mohamed
 ***************************************************************/


#include "gpio.h"
#include <avr/io.h>
#include <avr/interrupt.h>

/* global variable contain the ticks count of the timer */
unsigned char g_tick = 0;

// flag will be set when the timer count 1 second
unsigned char count_second_flag = 0;

// variables to hold the clock time
unsigned char seconds_count = 0;
unsigned char minutes_count = 0;
unsigned char hours_count = 0;


// Interrupt Service Routine for timer1 compare mode channel A
ISR(TIMER1_COMPA_vect)
{
	count_second_flag = 1;
}



void Timer1_Init_CTC_Mode(unsigned short tick)
{
	TCNT1 = 0;		/* Set timer1 initial count to zero */

	OCR1A = tick;    /* Set the Compare value to 125 ((125/500) * 100 = 25%) */

	TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */

	/* Configure timer control register TCCR1A
	 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
	 * 2. FOC1A=1 FOC1B=1
	 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
	 */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);

	/* Configure timer control register TCCR1B
	 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
	 * 2. Prescaler = F_CPU/1024 CS10=1 CS11=0 CS12=1
	 */
	TCCR1B = (1<<WGM12) | (1<<CS10) | (1<<CS12);
}

// External INT0 Interrupt Service Routine
ISR(INT0_vect)
{
	seconds_count = 0;
	minutes_count = 0;
	hours_count = 0;
}

// External INT1 Interrupt Service Routine
ISR(INT1_vect)
{
	// Pause the stop watch by disable the timer
	// Clear the timer clock bits (CS10=0 CS11=0 CS12=0) to stop the timer clock.
	TCCR1B &= 0xF8;
}

// External INT2 Interrupt Service Routine
ISR(INT2_vect)
{
	// resume the stop watch by enable the timer through the clock bits.
	TCCR1B |= (1<<CS10) | (1<<CS12);
}

// External INT0 Enable and Configuration function
void INT0_Init(void)
{
	// Configure INT0/PD2 as input pin
	DDRD  &= (~(1<<PD2));
	// Enable internal pull up resistor at INT0/PD2 pin
	PORTD |= (1<<PD2);
	// Trigger INT0 with the falling edge
	MCUCR &= ~(1<<ISC00);
	MCUCR |= (1<<ISC01);
	// Enable external interrupt pin INT0
	GICR  |= (1<<INT0);
}

// External INT1 Enable and Configuration function
void INT1_Init(void)
{
	// Configure INT1/PD3 as input pin
	DDRD  &= (~(1<<PD3));
	// Trigger INT1 with the raising edge
	MCUCR |= (1<<ISC10);
	MCUCR |= (1<<ISC11);
	// Enable external interrupt pin INT1
	GICR  |= (1<<INT1);
}

// External INT2 Enable and Configuration function
void INT2_Init(void)
{
	// Configure INT2/PB2 as input pin
	DDRB   &= (~(1<<PB2));
	// Enable internal pull up resistor at INT2/PB2 pin
    PORTB |= (1<<PB2);
	// Trigger INT2 with the falling edge
	MCUCSR &= ~(1<<ISC2);
	// Enable external interrupt pin INT2
	GICR   |= (1<<INT2);
}

